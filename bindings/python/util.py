# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.4
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_util', [dirname(__file__)])
        except ImportError:
            import _util
            return _util
        if fp is not None:
            try:
                _mod = imp.load_module('_util', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _util = swig_import_helper()
    del swig_import_helper
else:
    import _util
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class time(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, time, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, time, name)
    __repr__ = _swig_repr
    __swig_getmethods__["dtime"] = lambda x: _util.time_dtime
    if _newclass:dtime = staticmethod(_util.time_dtime)
    __swig_getmethods__["dalarm"] = lambda x: _util.time_dalarm
    if _newclass:dalarm = staticmethod(_util.time_dalarm)
    __swig_getmethods__["dsleep"] = lambda x: _util.time_dsleep
    if _newclass:dsleep = staticmethod(_util.time_dsleep)
    __swig_getmethods__["dtotv"] = lambda x: _util.time_dtotv
    if _newclass:dtotv = staticmethod(_util.time_dtotv)
    __swig_getmethods__["tvtod"] = lambda x: _util.time_tvtod
    if _newclass:tvtod = staticmethod(_util.time_tvtod)
    def __init__(self): 
        this = _util.new_time()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _util.delete_time
    __del__ = lambda self : None;
time_swigregister = _util.time_swigregister
time_swigregister(time)

def time_dtime():
  return _util.time_dtime()
time_dtime = _util.time_dtime

def time_dalarm(*args):
  return _util.time_dalarm(*args)
time_dalarm = _util.time_dalarm

def time_dsleep(*args):
  return _util.time_dsleep(*args)
time_dsleep = _util.time_dsleep

def time_dtotv(*args):
  return _util.time_dtotv(*args)
time_dtotv = _util.time_dtotv

def time_tvtod(*args):
  return _util.time_tvtod(*args)
time_tvtod = _util.time_tvtod

# This file is compatible with both classic and new-style classes.


